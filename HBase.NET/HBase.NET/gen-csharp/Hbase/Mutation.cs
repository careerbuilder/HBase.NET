/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace Hbase
{

  /// <summary>
  /// A Mutation object is used to either update or delete a column-value.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Mutation : TBase
  {
    private bool _isDelete;
    private byte[] _column;
    private byte[] _value;
    private bool _writeToWAL;

    public bool IsDelete
    {
      get
      {
        return _isDelete;
      }
      set
      {
        __isset.isDelete = true;
        this._isDelete = value;
      }
    }

    public byte[] Column
    {
      get
      {
        return _column;
      }
      set
      {
        __isset.column = true;
        this._column = value;
      }
    }

    public byte[] Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.value = true;
        this._value = value;
      }
    }

    public bool WriteToWAL
    {
      get
      {
        return _writeToWAL;
      }
      set
      {
        __isset.writeToWAL = true;
        this._writeToWAL = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool isDelete;
      public bool column;
      public bool value;
      public bool writeToWAL;
    }

    public Mutation() {
      this._isDelete = false;
      this.__isset.isDelete = true;
      this._writeToWAL = true;
      this.__isset.writeToWAL = true;
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Bool) {
              IsDelete = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Column = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Value = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              WriteToWAL = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Mutation");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.isDelete) {
        field.Name = "isDelete";
        field.Type = TType.Bool;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(IsDelete);
        oprot.WriteFieldEnd();
      }
      if (Column != null && __isset.column) {
        field.Name = "column";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Column);
        oprot.WriteFieldEnd();
      }
      if (Value != null && __isset.value) {
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.writeToWAL) {
        field.Name = "writeToWAL";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(WriteToWAL);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Mutation(");
      sb.Append("IsDelete: ");
      sb.Append(IsDelete);
      sb.Append(",Column: ");
      sb.Append(Column);
      sb.Append(",Value: ");
      sb.Append(Value);
      sb.Append(",WriteToWAL: ");
      sb.Append(WriteToWAL);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
